#define _POSIX_C_SOURCE 200809L
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
int main() {

start:
  char *buffer;
  size_t bufsize = 32;
  size_t chars;
  int stat;

  buffer = (char *)malloc(bufsize * sizeof(char));
  if (buffer == NULL) {
    return (1);
  }

  printf("Enter a command: ");

  chars = getline(&buffer, &bufsize, stdin);
  pid_t pid = fork();

  if (pid == 0) {
    // child exec branch change the tokenizer
    printf("%s\n", buffer);
    char *token;
    char *saveptr;
    printf("tokens are:\n");
    token = strtok_r(buffer, " ", &saveptr);
    while (token != NULL) {
      printf("%s\n", token);
      token = strtok_r(NULL, " ", &saveptr);
      // exec cmd entered
    }
  } else {
    printf("parent\n");
    waitpid(pid, &stat, WNOHANG);
  }

  free(buffer);
  goto start;
  return 0;
}
